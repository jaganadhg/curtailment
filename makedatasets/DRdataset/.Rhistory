preDRev = eigenVectorsTrainData[c(1:(beginDR-1),
(96+1):(96+beginDR-1),
(192+1):197),
(1:TOP)]
dim(preDRsignature)
length(preDRsignature)
dim(preDRev)
dim(mu)
length(mu)
q
xx
c
X
A = matrix(1:15, 3)
A
A^(-1)
ginv(A)
library(MASS)
ginv(A)
solve(A)
A
A = matrix(1:10, 3)
A = matrix(1:15, 3)
A
A = matrix(1:9, 3)
A
ginv(A)
solve(A)
dim(preDRsignature)
length(preDRsignature)
length(m)
length(mu)
numObsFeatures
numObsFeatures = 2*(beginDR-1) + 5
numObsFeatures
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
preDRindices
length(preDRindices)
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
numPreDRFeatures = length(preDRindices)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices]
preDRmu = mu[preDRindices]
preDRsigma = sigma[preDRindices]
5^(-1)
sg = c(1,2,3)
diag(sg)
diag(sg^(-1))
w = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1)) %*%
preDRev
length(w)
w
dim(preDRev)
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
numPreDRFeatures = length(preDRindices)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
preDRmu = mu[preDRindices]
preDRsigma = sigma[preDRindices]
# calculate weights
w = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1)) %*%
preDRev
w
weights = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1)) %*%
preDRev
dim(preDRev)
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]*preDRev[,i]
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]*preDRev[,i]
}
}
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]*preDRev[,i]
}
sumev
length(mu)
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]*eigenVectorsTrainData[,i]
}
length(sumev)
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]*eigenVectorsTrainData[,i]
}
preds = (sumev + mu)*diag(sigma)
preds
dim(preds)
dim(sumev + mu)
length(sumev + mu)
preds = (sumev + mu) %*% diag(sigma)
dim(preds)
preds
testVector
preds = ((sumev + mu) %*% diag(sigma))[beginDR:endDR]
preds
testVector
TOP
diag(weights)
weights
diag(weights)
diag(sigma)
weights
sigma
dim(diag(weights))
dim(diag(sigma))
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[i]%*%eigenVectorsTrainData[,i]
}
preds = ((sumev + mu) %*% diag(sigma))[beginDR:endDR]
trainIndices
length(mu)
mu = matrix(mu,nrows = 1)
mu = matrix(mu,nrows = 1)
mu = matrix(mu)
dim(mu)
dim(t(mu))
dim(normTrainData)
dim(covTrainData)
dim(eigenValuesTrainData)
length(eigenValuesTrainData)
length(eigenVectorsTrainData)
dim(eigenVectorsTrainData)
preDRindices
dim(preDRsignature)
length(preDRsignature)
dim(preDRev)
weights = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1)) %*%
preDRev
weights
weights1 = weights
preDRsignature - preDRmu
length(preDRsignature - preDRmu)
matrix(preDRsignature - preDRmu)
t(matrix(preDRsignature - preDRmu))
weights = t(matrix(preDRsignature - preDRmu)) %*%
diag(preDRsigma^(-1)) %*%
preDRev
weights
weights-weights1
dim(preDRev)
A=c(1,2,3,4)
dim(A)
matrix(A,nrows=1)
matrix(A,nrow=1)
A=matrix(A,nrow=1)
dim(A)
preDRsignature = matrix(DRvectors[testIndex,preDRindices],nrow=1)
dim(preDRsignature)
dim(preDRev)
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
preDRmu = matrix(mu[preDRindices],nrow=1)
preDRsigma = matrix(sigma[preDRindices],nrow=1)
dim(preDRmu)
dim(preDRsigma)
testVector
DRvectors[testIndex,]
preDRsignature
weights = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1)) %*%
preDRev
preDRsignature - preDRmu
weights = (preDRsignature - preDRmu) *
diag(preDRsigma^(-1)) %*%
preDRev
dim(preDRsignature - preDRmu)
c(1,2,3,4,5)*diag(c(2,2,2,2,2)^(-1))
c(1,2,3,4,5)%*%diag(c(2,2,2,2,2)^(-1))
dim(preDRsigma)
diag(preDRsigma)
x=matrix(c(2,2,2,2,2),nrow=1)
x1 = c(2,2,2,2,2)
y = c(1,2,3,4,5)
y1 = matrix(c(1,2,3,4,5),nrow=1)
x
x1
y
x1=matrix(c(2,2,2,2,2),nrow=1)
x = c(2,2,2,2,2)
y = c(1,2,3,4,5)
y1 = matrix(c(1,2,3,4,5),nrow=1)
x
y
x1
y1
y*diag(x^(-1))
y%*%diag(x^(-1))
y1%*%diag(x1^(-1))
y1*diag(x1^(-1))
weights = (preDRsignature - preDRmu) *
diag(preDRsigma^(-1))
weights
weights = (preDRsignature - preDRmu) %*%
diag(preDRsigma^(-1))
weights = (preDRsignature - preDRmu) *
diag(preDRsigma^(-1))  %*%
preDRev
weights = (preDRsignature - preDRmu) *
diag(preDRsigma^(-1))
weights
dim(weights)
dim(preDRev)
weights = (preDRsignature - preDRmu) *
diag(preDRsigma^(-1)) *
preDRev
y1
x1
x1[2] = 4
x1[4] = 8
x1
y1*diag(x1^(-1))
y1
x1
x1
y1
y1
x1
diag(x1^(-1))
diag(preDRsigma^(-1)
)
diag(x1^(-1))
diag(x^(-1))
preDRsigma = sigma[preDRindices]
diag(preDRsigma)
dim(preDRsigma)
(dim(diag(preDRsigma)^(-1)))
normSignature = (preDRsignature-preDRmu)*diag(preDRsigma^(-1))
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
preDRmu = mu[preDRindices]
preDRsigma = sigma[preDRindices]
diag(preDRsigma^(-1))
dim(diag(preDRsigma^(-1)))
dim((preDRsignature-preDRmu))
normSignature = (preDRsignature-preDRmu)*diag(preDRsigma^(-1))
dim(normSignature)
weights = normSignature * preDRev
normSignature = (preDRsignature-preDRmu)%*%diag(preDRsigma^(-1))
dim(normSignature)
weights = normSignature * preDRev
weights = normSignature %*% preDRev
weights - weights1
preDRsignature = c(3,5,7,9,11)
preDRmu = c(1,2,1,2,1)
preDRsigma = c(2,2,2,1,1)
preDRsignature-preDRmu
normSignature = (preDRsignature-preDRmu)%*%diag(preDRsigma^(-1))
normSignature
normSignature = (preDRsignature-preDRmu)*diag(preDRsigma^(-1))
normSignature
preDRev = cbind(c(2,3,4,5,1),c(1,2,3,4,5))
preDRev
normSignature
normSignature = (preDRsignature-preDRmu)%*%diag(preDRsigma^(-1))
normSignature
weights = normSignature %*% preDRev
weights
TOP
TOP = 2
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
preDRmu = mu[preDRindices]
preDRsigma = sigma[preDRindices]
# calculate weights
normSignature = (preDRsignature-preDRmu)%*%diag(preDRsigma^(-1))
weights = normSignature %*% preDRev
weights
weights1
weights[1]
weights[2]
inDRindices = c(beginDR:endDR)
inDRindices
length(inDRindices)
inDRev = eigenVectorsTrainData[inDRindices,(1:TOP)]
dim(inDRev)
inDRev = eigenVectorsTrainData[inDRindices,c(1:TOP)]
dim(inDRev)
dim(trainData)
muTD = apply(trainData,2,mean)
dim(muTD)
length(muTD)
sigmaTD = apply(trainData,2,sd)
length(sigmaTD)
x = trainData - muTD
dim(x)
x = (trainData - muTD)%*%diag(sigmaTD^(-1))
dim(x)
x-normTrainData
y1
y
trainData = cbind(c(1,2,3,4,5),c(3,6,2,7,8),c(4,7,2,1,9))
trainData
normTrainData = scale(trainData,center = TRUE, scale = TRUE)
normTrainData
muTD = apply(trainData,2,mean)
sigmaTD = apply(trainData,2,sd)
x = (trainData - muTD)%*%diag(sigmaTD^(-1))
x
trainData
muTD
trainData - muTD
trainData %-% muTD
1-3
3-5.2
2-5.2
muTD
rep(muTD,3)
rep(muTD,1,3)
rep(muTD,3,1)
rep(muTD,3,3
)
matrixrep(muTD,5),nrow=5)
matrix(rep(muTD,5),nrow=5)
muTD
matrix(rep(muTD,5),nrow=5,bycol=T)
matrix(rep(muTD,5),nrow=5,byrow=T)
x = (trainData - matrix(rep(muTD,5),nrow=5,byrow=T))%*%diag(sigmaTD^(-1))
x-normTrainData
weights[1]
weights[2]
dim(inDRev)
diag(inDRsigma)
dim(weights)
i
testIndex = testIndices[i]
testVector = DRvectors[testIndex,(beginDR:endDR)]
#--------------------------
# define training data
wkend = c(198,199)
trainData = DRvectors[trainIndices,-wkend]
# normalize kwh and temp columns
normTrainData = scale(trainData,center = TRUE,scale = TRUE)
# find eigen vectors
covTrainData = cov(normTrainData)
eigenValuesTrainData = eigen(covTrainData)$values
eigenVectorsTrainData = eigen(covTrainData)$vectors
# save eigen vectors
evFile = paste("../../EigenVectors/",bd,"-ev.csv",sep="")
write.csv(eigenVectorsTrainData,evFile,row.names=F)
# No. of observed features in preDR signature are
# kwh & temp before DR, and 5 weekdays
TOP = 2
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
preDRmu = mu[preDRindices]
preDRsigma = sigma[preDRindices]
normSignature = (preDRsignature-preDRmu)%*%diag(preDRsigma^(-1))
weights = normSignature %*% preDRev
# make predictions
inDRindices = c(beginDR:endDR)
inDRev = eigenVectorsTrainData[inDRindices,(1:TOP)]
inDRmu = mu[inDRindices]
inDRsigma = sigma[inDRindices]
sumev = 0
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[k]%*%inDRev[,k]
}
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[k]%*%inDRev[,k]
}
dim(inDRev)
k
weights[k]%*%inDRev[,k]
weights[k]
weights[k]*inDRev[,k]
inDRev[,k]
0.03990338*weights[1]
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[k]*inDRev[,k]
}
sumev
dim(sumev)
length(simev)
length(sumev)
length(inDRmu)
sumev + inDRmu
inDRmu
preds = ((sumev + inDRmu) %*% diag(inDRsigma))
preds
preds = ((sumev + inDRmu) * diag(inDRsigma))
preds
testVector
inDRsigma
sumev + inDRmu
preds = ((sumev + inDRmu) %*% diag(inDRsigma))
# This script makes predictions for each DR day
# based on eigen PCA model
# Traindata is 2/3 of the entire data.
rm(list=ls())
beginDR = 54 # 1:15 PM
endDR = 69 # 5:00 PM
vectorLength = 199
absent2012 = FALSE
#read DR vectors
setwd("/Users/saima/Desktop/curtailment/")
# Find buildings from the DR schedule
schedule12 = read.csv("data/DRevents2012.csv",header=TRUE)
schedule13 = read.csv("data/DRevents2013.csv",header=TRUE)
schedule14 = read.csv("data/DRevents2014.csv",header=TRUE)
buildings12 = as.character(unique(schedule12$Building))
buildings13 = as.character(unique(schedule13$Building))
buildings14 = as.character(unique(schedule14$Building))
testBuildings = unique(c(buildings13,buildings14))
allBuildings = unique(c(buildings12,buildings13,buildings14))
numBuildings = length(allBuildings)
#-------------------------------
# do for all buildings
allMape = list()
allDayCounts = list()
setwd("/Users/saima/Desktop/curtailment/makedatasets/DRdataset/")
j=1
bd = allBuildings[j]
# find DR vector file names
fList = list.files(pattern = paste("^",bd,sep=""))
if(length(fList)==0){
next
}
numDays = length(fList)
# read DR vectors
DRvectors = NULL
skipped = NULL
for (n in 1:numDays){
vector = read.csv(fList[n],header=TRUE,as.is=TRUE)
vector = vector[,1]
if(length(vector) != vectorLength){
skipped = c(skipped,n)
next  # skip this record
}
DRvectors = rbind(DRvectors,vector)
}
# update numdays
fList = fList[-skipped]
numDays = length(fList)
numTrainDays = round((2/3)*numDays)
numTestDays = numDays - numTrainDays
trainIndices = c(1:numTrainDays)
testIndices = c((numTrainDays+1):numDays)
########################
mape = numeric(numTestDays)
obsDayCount = numeric(numTestDays)
# make predictions
i=1
testIndex = testIndices[i]
testVector = DRvectors[testIndex,(beginDR:endDR)]
#--------------------------
# define training data
wkend = c(198,199)
trainData = DRvectors[trainIndices,-wkend]
# find eigen vectors
covTrainData = cov(trainData)
eigenValuesTrainData = eigen(covTrainData)$values
eigenVectorsTrainData = eigen(covTrainData)$vectors
# save eigen vectors
evFile = paste("../../EigenVectors/",bd,"-ev.csv",sep="")
write.csv(eigenVectorsTrainData,evFile,row.names=F)
# No. of observed features in preDR signature are
# kwh & temp before DR, and 5 weekdays
TOP = 2
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
# calculate weights
weights = preDRsignature %*% preDRev
# make predictions
inDRindices = c(beginDR:endDR)
inDRev = eigenVectorsTrainData[inDRindices,(1:TOP)]
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[k]*inDRev[,k]
}
preds = sumev
preds
trainData = DRvectors[trainIndices,-wkend]
# find eigen vectors
covTrainData = cov(trainData)
eigenValuesTrainData = eigen(covTrainData)$values
eigenVectorsTrainData = eigen(covTrainData)$vectors
# save eigen vectors
evFile = paste("../../EigenVectors/",bd,"-ev.csv",sep="")
write.csv(eigenVectorsTrainData,evFile,row.names=F)
# No. of observed features in preDR signature are
# kwh & temp before DR, and 5 weekdays
TOP = 10
preDRindices = c(1:(beginDR-1),(96+1):(96+beginDR-1),(192+1):197)
preDRsignature = DRvectors[testIndex,preDRindices]
preDRev = eigenVectorsTrainData[preDRindices,(1:TOP)]
# calculate weights
weights = preDRsignature %*% preDRev
# make predictions
inDRindices = c(beginDR:endDR)
inDRev = eigenVectorsTrainData[inDRindices,(1:TOP)]
sumev = 0
for (k in 1:length(weights)){
sumev = sumev + weights[k]*inDRev[,k]
}
preds = sumev
preds
testVector
