errors = read.csv("avg-mapes.csv", head = TRUE)
errors = errors[1:32,]
#----------------------------
# read DR vectors
setwd("~/Desktop/curtailment/")
# Find buildings from the DR schedule
schedule12 = read.csv("data/DRevents2012.csv",header=TRUE)
schedule13 = read.csv("data/DRevents2013.csv",header=TRUE)
schedule14 = read.csv("data/DRevents2014.csv",header=TRUE)
buildings12 = as.character(unique(schedule12$Building))
buildings13 = as.character(unique(schedule13$Building))
buildings14 = as.character(unique(schedule14$Building))
testBuildings = unique(c(buildings13,buildings14))
allBuildings = unique(c(buildings12,buildings13,buildings14))
numBuildings = length(allBuildings)
# do for all buildings
vectorLength = 199
avgKWH = NULL
sdKWH = NULL
newbd = NULL
for (j in 1:numBuildings){
bd = allBuildings[j]
setwd("~/Desktop/curtailment/makedatasets/DRdataset/")
fList = list.files(pattern = paste("^",bd,sep=""))
if(length(fList)==0){
next
}
numDays = length(fList)
# read DR vectors
DRvectors = NULL
skipped = NULL
for (n in 1:numDays){
vector = read.csv(fList[n],header=TRUE,as.is=TRUE)
vector = vector[,1]
if(length(vector) != vectorLength){
skipped = c(skipped,n)
next  # skip this record
}
DRvectors = rbind(DRvectors,vector)
}
avgKWH = c(avgKWH,mean(DRvectors[,c(1:96)]))
sdKWH = c(sdKWH, sd(DRvectors[,c(1:96)]))
newbd = c(newbd, bd)
}
avgKWH = avgKWH[-c(16, 24, 25)]
sdKWH = sdKWH[-c(16, 24, 25)]
newbd = newbd[-c(16, 24, 25)]
# frame the data
df = data.frame(building = as.character(errors$building),
avgKWH = avgKWH,
sdKWH = sdKWH,
HistMean = errors$Histmean,
EnsRF = errors$EnsRF)
#1. scatter plot kwh vs mape
df1 = melt(df, id = c("building","avgKWH","sdKWH"))
g1 = ggplot(df1) +
geom_point(size=3,
aes(avgKWH,value,
color = variable,
shape = variable)) +
geom_smooth(method=lm, aes(x=avgKWH, y=value, color = variable))
g2 = g1 + xlab("Average electricity consumption (in kWH)") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
df = data.frame(building = as.character(errors$building),
avgKWH = avgKWH,
sdKWH = sdKWH,
IDS = errors$Histmean,
Ensemble = errors$EnsRF)
#1. scatter plot kwh vs mape
df1 = melt(df, id = c("building","avgKWH","sdKWH"))
g1 = ggplot(df1) + theme_bw() +
geom_point(size=3,
aes(avgKWH,value,
color = variable,
shape = variable)) +
geom_smooth(method=lm, aes(x=avgKWH, y=value, color = variable))
g2 = g1 + xlab("Average electricity consumption (in kWH)") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
# 2. scatter plot sd kwh vs mape
g1 = ggplot(df1) + theme_bw() +
geom_point(size=3,
aes(sdKWH,value,
color = variable,
shape = variable)) +
geom_smooth(method=lm, aes(x=sdKWH, y=value, color = variable))
g2 = g1 + xlab("Standard deviation of electricity consumption (in kWH)") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
# plot histogram of events per building
library(ggplot2)
library(reshape2)
library(plyr)
setwd("~/Desktop/curtailment/MAPE/mape-ws/")
filesWS = list.files(pattern="*.csv")
numFiles = length(filesWS)
setwd("~/Desktop/curtailment/MAPE/")
errors = read.csv("avg-mapes.csv", head = TRUE)
errors = errors[1:32,]
# frame the data
df = data.frame(building = as.character(errors$building),
IDS = errors$Histmean,
Ensemble = errors$EnsRF)
df1 = melt(df, id="building")
g1 = ggplot(df1, aes(variable, value, color = variable)) +
geom_boxplot() +
geom_jitter(position = position_jitter(width = .3))
g2 = g1 + xlab("Building") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
#-----------------------
#2. scatter plot: MAPE vs #events in training data
# frame the data
df = data.frame(building = as.character(errors$building),
numTrain = errors$numTrainDays,
HistMean = errors$Histmean,
EnsRF = errors$EnsRF)
df1 = melt(df, id = c("building","numTrain"))
g1 = ggplot(df1) + theme_bw() +
geom_point(size=3,
aes(numTrain,value,
color = variable,
shape = variable)) +
geom_smooth(method=lm, aes(x=numTrain, y=value, color = variable))
g2 = g1 + xlab("Number of Training Days") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
# frame the data
df = data.frame(building = as.character(errors$building),
numTrain = errors$numTrainDays,
IDS = errors$Histmean,
Ensemble = errors$EnsRF)
df1 = melt(df, id = c("building","numTrain"))
g1 = ggplot(df1) + theme_bw() +
geom_point(size=3,
aes(numTrain,value,
color = variable,
shape = variable)) +
geom_smooth(method=lm, aes(x=numTrain, y=value, color = variable))
g2 = g1 + xlab("Number of Training Days") + ylab("MAPE") +
theme(legend.position = "top") +
theme(legend.title = element_blank())
g3 = g2 + theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g3
fList
read obs and pred values
setwd("~/Desktop/curtailment/Obs/test/")
fList = list.files(pattern = paste("*.csv"))
fList = fList [-c(16,24,25,26)]
numFiles = length(fList)
fList
library(ggplot2)
library(reshape2)
library(plyr)
setwd("~/Desktop/curtailment/MAPE/mape-histmean/")
filesHM = list.files(pattern="*.csv")
numFiles = length(filesHM)
numTestDays = numeric(numFiles)
numTrainDays = numeric(numFiles)
# 1. find avg histmean mape for all files
avgError = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesHM[i])
avgError[i] = mean(errors$mape)
}
# 2. find avg wd mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-wd/")
filesWD = list.files(pattern="*.csv")
numFiles = length(filesWD)
avgWDerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesWD[i])
avgWDerror[i] = mean(errors$mape)
}
# 3. find avg wm mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-wm/")
filesWM = list.files(pattern="*.csv")
numFiles = length(filesWM)
avgWMerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesWM[i])
avgWMerror[i] = mean(errors$mape)
}
# 4. find avg ws mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ws/")
filesWS = list.files(pattern="*.csv")
numFiles = length(filesWS)
avgWSerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesWS[i])
avgWSerror[i] = mean(errors$mape)
numTestDays[i] = dim(errors)[1]
numTrainDays[i] = errors$daycounts[1]
}
#----------------------------
# 5. find avg knn mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-knn/")
filesKNN = list.files(pattern="*.csv")
numFiles = length(filesKNN)
avgKNNerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesKNN[i])
avgKNNerror[i] = mean(errors$mape)
}
# 6. find avg knn mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-knn-global/")
filesKNNg = list.files(pattern="*.csv")
numFiles = length(filesKNNg)
avgKNNgError = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesKNNg[i])
avgKNNgError[i] = mean(errors$mape)
}
#----------------------------
# 7. find avg ensLM mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensLM/")
filesEnsLM = list.files(pattern="*.csv")
numFiles = length(filesEnsLM)
avgEnsLMerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsLM[i])
avgEnsLMerror[i] = mean(errors$x)
}
# 8. find avg ensLM2 mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensLM2/")
filesEnsLM2 = list.files(pattern="*.csv")
numFiles = length(filesEnsLM2)
avgEnsLMerror2 = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsLM2[i])
avgEnsLMerror2[i] = mean(errors$x)
}
# 9. find avg ensLM3 mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensLM3/")
filesEnsLM3 = list.files(pattern="*.csv")
numFiles = length(filesEnsLM3)
avgEnsLMerror3 = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsLM3[i])
avgEnsLMerror3[i] = mean(errors$x)
}
#----------------------------
# 10. find avg ensRT mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensrt/")
filesEnsRT = list.files(pattern="*.csv")
numFiles = length(filesEnsRT)
avgEnsRTerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsRT[i])
avgEnsRTerror[i] = mean(errors$x)
}
# 11. find avg ensRF mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensrf/")
filesEnsRF = list.files(pattern="*.csv")
numFiles = length(filesEnsRF)
avgEnsRFerror = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsRF[i])
avgEnsRFerror[i] = mean(errors$x)
}
# 12. find avg ensRF2 mape for all files
setwd("~/Desktop/curtailment/MAPE/mape-ensrf2/")
filesEnsRF2 = list.files(pattern="*.csv")
numFiles = length(filesEnsRF2)
avgEnsRFerror2 = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesEnsRF2[i])
avgEnsRFerror2[i] = mean(errors$x)
}
#----------------------------
# save results
df = data.frame(building = substr(filesWD,9,11),
numTestDays = numTestDays,
numTrainDays = numTrainDays,
IDS = avgError,
WD = avgWDerror,
WM = avgWMerror,
WS = avgWSerror,
KNN = avgKNNerror,
KNNglobal = avgKNNgError,
EnsLM = avgEnsLMerror,
EnsLM2 = avgEnsLMerror2,
EnsLM3 = avgEnsLMerror3,
EnsRT = avgEnsRTerror,
Ensemble = avgEnsRFerror,
EnsRF2 = avgEnsRFerror2)
# leave out spurious data buildings
df = df[-c(16, 24, 25),] #SCC, SCB, LRC
rownames(df) = NULL
#-------------------------
#plot ecdf with ggplot
df1 = subset(df, select =
c(building,IDS,Ensemble))
df2 = melt(df1,id="building")
cdfplot = ggplot(df2, aes(x=value)) +
stat_ecdf(aes(colour = variable), size=1)
g1 = cdfplot + theme_bw() +
xlab("MAPE") +
ylab("Fraction of Buildings") +
theme(legend.position="top")+
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
g1
# plot histogram of events per building
library(ggplot2)
library(reshape2)
library(plyr)
setwd("~/Desktop/curtailment/MAPE/mape-ws/")
filesWS = list.files(pattern="*.csv")
numFiles = length(filesWS)
numTestDays = numeric(numFiles)
numTrainDays = numeric(numFiles)
# 1. find avg histmean mape for all files
avgError = numeric(numFiles)
for (i in 1:numFiles){
errors = read.csv(filesWS[i])
avgError[i] = mean(errors$mape)
numTestDays[i] = dim(errors)[1]
numTrainDays[i] = errors$daycounts[1]
}
#----------------------------
# save results
df = data.frame(building = substr(filesWS,9,11),
numTrainDays = numTrainDays,
numTestDays = numTestDays)
# leave out spurious data buildings
df = df[-c(16, 24, 25),] #SCC, SCB, LRC
rownames(df) = NULL
# plot stacked barplots
df1 = melt(df, id="building")
stack1 = ggplot(df1, aes(x = building, y = value, fill=variable)) +
geom_bar(stat="identity") +
xlab("Building") + ylab("Count") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle=90, vjust=1))
stack2 = stack1 +
scale_fill_discrete(labels=c("Training Days  ", "Test Days")) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
stack2
stack1 = ggplot(df1, aes(x = building, y = value, fill=variable)) +
theme_bw() +
geom_bar(stat="identity") +
xlab("Building") + ylab("Count") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle=90, vjust=1))
stack2 = stack1 +
scale_fill_discrete(labels=c("Training Days  ", "Test Days")) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
stack2
#-----------------------
# plot histograms
# distTrain = ggplot(df, aes(x=numTrainDays)) +
#               geom_histogram(binwidth = 1)
# distTrain
#
# distTest = ggplot(df, aes(x=numTestDays)) +
#             geom_histogram(binwidth = 1)
# distTest
newBD = c("B1","B2","B3","B4","B5","B6","B7","B8","B9","B10",
"B11","B12","B13","B14","B15","B16","B17","B18","B19","B20",
"B21","B22","B23","B24","B25","B26","B27","B28","B29","B30",
"B31","B32","B33")
df = data.frame(building = substr(filesWS,9,11),
numTrainDays = numTrainDays,
numTestDays = numTestDays)
# leave out spurious data buildings
df = df[-c(16, 24, 25),] #SCC, SCB, LRC
df$building
rownames(df) = NULL
df$building = newBD
length(newBD)
newBD = c("B1","B2","B3","B4","B5","B6","B7","B8","B9","B10",
"B11","B12","B13","B14","B15","B16","B17","B18","B19","B20",
"B21","B22","B23","B24","B25","B26","B27","B28","B29","B30",
"B31","B32")
df$building = newBD
df$building
# plot stacked barplots
df$building = factor(df$building, levels = df$building)
df1 = melt(df, id="building")
stack1 = ggplot(df1, aes(x = building, y = value, fill=variable)) +
theme_bw() +
geom_bar(stat="identity") +
xlab("Building") + ylab("Count") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle=90, vjust=1))
stack2 = stack1 +
scale_fill_discrete(labels=c("Training Days  ", "Test Days")) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=14)) +
theme(axis.text = element_text(size=14))
stack2
stack1 = ggplot(df1, aes(x = building, y = value, fill=variable)) +
theme_bw() +
geom_bar(stat="identity") +
xlab("Building") + ylab("Count") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle=90, vjust=1))
stack2 = stack1 +
scale_fill_discrete(labels=c("Training Days  ", "Test Days")) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=16)) +
theme(axis.text = element_text(size=16))
stack2
stack1 = ggplot(df1, aes(x = building, y = value, fill=variable)) +
theme_bw() +
geom_bar(stat="identity") +
xlab("Building") + ylab("Count") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle=90, vjust=1))
stack2 = stack1 +
scale_fill_discrete(labels=c("Training Days  ", "Test Days")) +
theme(legend.text = element_text(size = 16)) +
theme(axis.title = element_text(size=18)) +
theme(axis.text = element_text(size=18))
stack2
# This file does the following:
# reads total curtailment for each DR event
# (uses FB: fixed baseline)
# plots curtailment on a calendar
library(quantmod)
library(ggplot2)
library(reshape2)
library(plyr)
library(scales)
# read curtailment data for each event
events = read.csv("curtailment-FB.csv")
dat = data.frame(date=as.Date(events$date),
curtailment=events$curtailment)
dat$year = as.numeric(as.POSIXlt(dat$date)$year+1900)
dat$month = as.numeric(as.POSIXlt(dat$date)$mon+1)
dat$monthf = factor(dat$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
dat$weekday = as.POSIXlt(dat$date)$wday
dat$weekdayf = factor(dat$weekday,levels=rev(0:6),
labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
dat$yearmonth = as.yearmon(dat$date)
dat$yearmonthf = factor(dat$yearmonth)
dat$week = as.numeric(format(dat$date,"%W"))
dat = ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
# plot
P= ggplot(dat, aes(monthweek, weekdayf, fill = curtailment)) +
geom_tile(colour = "white") +
facet_grid(year~monthf) +
scale_fill_gradient(low="yellow", high="red") +
labs(plot.title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") + ylab("")
P
install.packages("quantmod")
library(quantmod)
library(ggplot2)
library(reshape2)
library(plyr)
library(scales)
setwd("~/Desktop/curtailment/data/")
# read curtailment data for each event
events = read.csv("curtailment-FB.csv")
dat = data.frame(date=as.Date(events$date),
curtailment=events$curtailment)
dat$year = as.numeric(as.POSIXlt(dat$date)$year+1900)
dat$month = as.numeric(as.POSIXlt(dat$date)$mon+1)
dat$monthf = factor(dat$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
dat$weekday = as.POSIXlt(dat$date)$wday
dat$weekdayf = factor(dat$weekday,levels=rev(0:6),
labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
dat$yearmonth = as.yearmon(dat$date)
dat$yearmonthf = factor(dat$yearmonth)
dat$week = as.numeric(format(dat$date,"%W"))
dat = ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
# plot
P= ggplot(dat, aes(monthweek, weekdayf, fill = curtailment)) +
geom_tile(colour = "white") +
facet_grid(year~monthf) +
scale_fill_gradient(low="yellow", high="red") +
labs(plot.title = "Time-Series Calendar Heatmap") +
xlab("Week of Month") + ylab("")
P
